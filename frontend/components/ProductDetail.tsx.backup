'use client';

// components/ProductDetail.tsx
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { getTranslatedValue, formatAttributeValue } from '@/lib/product-utils';
import ImageGallery from '@/components/ImageGallery';
import VariantSelector from '@/components/VariantSelector';
import LanguageSelector from '@/components/LanguageSelector';
import AIDescription from '@/components/AIDescription';
import { getLabel } from '@/lib/ui-labels';
import { Product, Variant } from '@/types/product';
import { useLanguage } from '@/contexts/LanguageContext';
import { useCompare } from '@/contexts/CompareContext';
import { useProductNavigation } from '@/contexts/ProductNavigationContext';
import ProductNavigationBar from '@/components/ProductNavigationBar';
import { useState, useMemo } from 'react';

interface ProductDetailProps {
  product: Product;
  groupProducts?: Product[];
}

export default function ProductDetail({ product, groupProducts }: ProductDetailProps) {
  const { currentLang } = useLanguage();
  const router = useRouter();
  const { addToCompare, removeFromCompare, isInCompare } = useCompare();
  const { navigationProducts, clearCatalogState } = useProductNavigation();

  // State per tracciare la variante selezionata
  const [selectedVariantCode, setSelectedVariantCode] = useState<string>(product.codice);

  // State per il pulsante "Mostra Galleria" quando la galleria Ã¨ ridotta
  const [galleryExpandButton, setGalleryExpandButton] = useState<React.ReactNode>(null);

  // Determina il codice del prodotto da usare per il confronto
  // Se ci sono varianti, usa la variante selezionata, altrimenti usa il prodotto master
  const compareCode = useMemo(() => {
    if (product.variants && product.variants.length > 0) {
      return selectedVariantCode;
    }
    return product.codice;
  }, [product.variants, product.codice, selectedVariantCode]);

  const inCompare = isInCompare(compareCode);

  const handleCompareClick = () => {
    if (inCompare) {
      removeFromCompare(compareCode);
    } else {
      addToCompare(compareCode);
    }
  };

  // Trova la variante selezionata (o usa il prodotto corrente se non ci sono varianti)
  const selectedVariant = useMemo(() => {
    if (!product.variants || product.variants.length === 0) {
      return null;
    }
    return product.variants.find(v => v.codice === selectedVariantCode) || product.variants[0];
  }, [product.variants, selectedVariantCode]);

  // Nome del prodotto (sempre dal master)
  const nome = getTranslatedValue(product.nome, currentLang);

  // Costruisci descrizione dinamica strutturata: nome + qualifiers + attributi variante (escluse categorie)
  const descrizioneData = useMemo(() => {
    // Usa gli attributi della variante se esiste, altrimenti quelli del prodotto master
    const attributiDaUsare = selectedVariant?.attributi || product.attributi;

    if (!attributiDaUsare) {
      return [];
    }

    // Lista campi da escludere (categorie dal _meta)
    const categoryFields = new Set([
      'Scuri alla Veneta',
      'Persiane a Muro',
      'Persiane con Telaio'
    ]);

    const parts: Array<{label: string, value: string, isBoolean: boolean, booleanValue: boolean}> = [];

    // Aggiungi tutti gli attributi (qualifiers + altri attributi)
    Object.entries(attributiDaUsare).forEach(([key, attrValue]) => {
      // Escludi le categorie
      if (categoryFields.has(key)) {
        return;
      }

      // Ottieni la label tradotta
      let label = key;
      if (typeof attrValue === 'object' && attrValue !== null && 'label' in attrValue) {
        label = getTranslatedValue(attrValue.label, currentLang);
      }

      // Ottieni il valore formattato
      let displayValue = '';
      let isBoolean = false;
      let booleanValue = false;

      if (typeof attrValue === 'boolean') {
        isBoolean = true;
        booleanValue = attrValue;
        displayValue = attrValue ? getLabel('common.yes', currentLang) : getLabel('common.no', currentLang);
      } else if (typeof attrValue === 'object' && attrValue !== null && 'value' in attrValue) {
        const rawValue = attrValue.value;
        if (typeof rawValue === 'boolean') {
          isBoolean = true;
          booleanValue = rawValue;
          displayValue = rawValue ? getLabel('common.yes', currentLang) : getLabel('common.no', currentLang);
        } else if (typeof rawValue === 'object') {
          displayValue = getTranslatedValue(rawValue, currentLang);
        } else {
          displayValue = String(rawValue);
        }
      } else {
        displayValue = String(attrValue);
      }

      parts.push({ label, value: displayValue, isBoolean, booleanValue });
    });

    return parts;
  }, [selectedVariant, product.attributi, currentLang]);

  // Prepara array immagini per gallery
  // Se c'Ã¨ una variante selezionata, usa le sue immagini, altrimenti usa quelle del master
  const galleryImages = useMemo(() => {
    // Se c'Ã¨ una variante selezionata, prova a usare le sue immagini
    if (selectedVariant) {
      // Prima prova con l'array immagini della variante
      if (selectedVariant.immagini && selectedVariant.immagini.length > 0) {
        return selectedVariant.immagini;
      }
      // Altrimenti usa l'immagine singola della variante
      if (selectedVariant.immagine) {
        return [selectedVariant.immagine];
      }
    }

    // Fallback: usa le immagini del prodotto master
    if (product.immagini && product.immagini.length > 0) {
      return product.immagini;
    }
    if (product.immagine) {
      return [product.immagine];
    }

    return [];
  }, [selectedVariant, product.immagini, product.immagine]);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header con breadcrumb e back button */}
      <header className="sticky top-0 z-50 bg-white shadow-sm">
        <div className="container mx-auto px-3 sm:px-4 py-3 sm:py-4">
          <div className="relative flex items-center justify-between gap-2 sm:gap-4">
            <div className="flex items-center gap-2 sm:gap-4 min-w-0 z-10">
              <Link
                href="/"
                className="flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors text-xs sm:text-sm font-medium flex-shrink-0"
              >
                <svg className="w-3 sm:w-4 h-3 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span className="hidden xs:inline">{getLabel('product.back_to_catalog', currentLang)}</span>
                <span className="xs:hidden">{getLabel('product.back_to_catalog', currentLang)}</span>
              </Link>

              <nav className="text-xs sm:text-sm text-gray-600 hidden md:block truncate">
                <Link href="/" className="hover:text-gray-900">
                  {getLabel('breadcrumb.home', currentLang)}
                </Link>
                <span className="mx-2">/</span>
                <span className="text-gray-900">{getLabel('breadcrumb.products', currentLang)}</span>
                <span className="mx-2">/</span>
                <span className="text-gray-900 font-medium truncate">{product.codice}</span>
              </nav>
            </div>

            {/* Pulsante Espandi Galleria (quando ridotta) - CENTRATO ASSOLUTO */}
            {galleryExpandButton && (
              <div className="hidden md:flex absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
                {galleryExpandButton}
              </div>
            )}

            {/* Language Selector */}
            <div className="flex-shrink-0 z-10">
              <LanguageSelector />
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Bar for filtered products */}
      {navigationProducts.length > 0 && (
        <ProductNavigationBar
          products={navigationProducts}
          currentProductCode={product.codice}
          lang={currentLang}
          onCollapseChange={(collapsed, button) => {
            setGalleryExpandButton(collapsed ? button : null);
          }}
        />
      )}

      <main className="container mx-auto px-3 sm:px-4 py-4 sm:py-8">
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          {/* Griglia: Immagine + Info/Varianti/CTA */}
          <div className="grid md:grid-cols-2 gap-4 sm:gap-6 md:gap-8 p-3 sm:p-6 md:p-8">
            {/* Colonna Sinistra: Solo Immagini */}
            <div>
              {/* Gallery immagini */}
              {galleryImages.length > 0 ? (
                <ImageGallery images={galleryImages} productName={nome} />
              ) : (
                <div className="aspect-square bg-gray-100 rounded-lg flex items-center justify-center">
                  <div className="text-center text-gray-400">
                    <div className="text-4xl sm:text-6xl mb-2">ðŸ“¦</div>
                    <p className="text-sm sm:text-base">{getLabel('product.no_image', currentLang)}</p>
                  </div>
                </div>
              )}
            </div>

            {/* Colonna Destra: Info Prodotto + Varianti + CTA */}
            <div className="flex flex-col space-y-4 sm:space-y-6">
              {/* Nome */}
              <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-900">
                {nome}
              </h1>

              {/* Descrizione dinamica - stile testo scorrevole */}
              {descrizioneData.length > 0 && (
                <div className="bg-gray-50 border-l-4 border-green-500 rounded-r-lg p-3 sm:p-4 shadow-sm">
                  <p className="text-sm sm:text-base text-gray-700 leading-relaxed">
                    {descrizioneData.map((item, idx) => (
                      <span key={idx}>
                        <span className="font-bold text-gray-900">{item.label}</span>
                        {': '}
                        {item.isBoolean ? (
                          <span className={`inline-flex items-center gap-1 px-2 py-0.5 rounded text-xs font-bold ${
                            item.booleanValue
                              ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white'
                              : 'bg-gray-300 text-gray-700'
                          }`}>
                            {item.booleanValue ? 'âœ“' : 'âœ—'} {item.value}
                          </span>
                        ) : (
                          <span className="text-gray-900">{item.value}</span>
                        )}
                        {idx < descrizioneData.length - 1 && (
                          <span className="text-gray-400 mx-1 sm:mx-2">â€¢</span>
                        )}
                      </span>
                    ))}
                  </p>
                </div>
              )}

              {/* DisponibilitÃ  */}
              {product.disponibilita !== undefined && (
                <div className="flex items-center gap-2">
                  {product.disponibilita > 0 ? (
                    <>
                      <div className="w-2.5 sm:w-3 h-2.5 sm:h-3 bg-green-500 rounded-full flex-shrink-0"></div>
                      <span className="text-sm sm:text-base text-green-700 font-medium">
                        {getLabel('product.availability.available', currentLang)} ({product.disponibilita} {getLabel('product.availability.pieces', currentLang)})
                      </span>
                    </>
                  ) : (
                    <>
                      <div className="w-2.5 sm:w-3 h-2.5 sm:h-3 bg-red-500 rounded-full flex-shrink-0"></div>
                      <span className="text-sm sm:text-base text-red-700 font-medium">
                        {getLabel('product.availability.not_available', currentLang)}
                      </span>
                    </>
                  )}
                </div>
              )}

              {/* Varianti */}
              {product.variants && product.variants.length > 0 && (
                <div className="border-t pt-6">
                  <VariantSelector
                    variants={product.variants}
                    currentCode={selectedVariantCode}
                    productAttributes={product.attributi}
                    groupProducts={groupProducts}
                    lang={currentLang}
                    onVariantChange={setSelectedVariantCode}
                  />
                </div>
              )}

              {/* Sezione Downloads + Azioni (Carrello + Confronta) */}
              <div className="pt-4 sm:pt-6">
                {/* Downloads + Azioni - stack su mobile, riga su desktop */}
                <div className="flex flex-col sm:flex-row items-start gap-3 sm:gap-3">
                  {/* Downloads compatti (se presenti) */}
                  {product.risorse && product.risorse.length > 0 && (
                    <div className="flex-shrink-0 w-full sm:w-auto">
                      <h4 className="text-xs font-bold uppercase tracking-wider text-gray-500 mb-2 sm:mb-3">
                        {getLabel('product.resources_title', currentLang)}
                      </h4>
                      <div className="flex gap-2 flex-wrap">
                        {product.risorse.map((resource, idx) => {
                      // Mappa estensione -> icona SVG con testo
                      const getFileIcon = (ext: string) => {
                        const extension = ext.toLowerCase();
                        return (
                          <svg className="w-10 h-10" viewBox="0 0 40 40" fill="none">
                            {/* Forma documento */}
                            <rect x="8" y="4" width="24" height="32" rx="2" fill="white" stroke="currentColor" strokeWidth="2"/>
                            <path d="M26 4L32 10L26 10V4Z" fill="currentColor" opacity="0.3"/>
                            {/* Testo estensione */}
                            <text
                              x="20"
                              y="26"
                              fontSize="8"
                              fontWeight="bold"
                              fill="currentColor"
                              textAnchor="middle"
                              className="uppercase"
                            >
                              {extension.toUpperCase()}
                            </text>
                          </svg>
                        );
                      };

                      return (
                        <a
                          key={idx}
                          href={resource.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          title={`${resource.category} (${resource.extension.toUpperCase()})`}
                          className="group relative flex items-center justify-center w-12 h-12 bg-white hover:bg-green-50 border-2 border-gray-300 hover:border-green-500 rounded-lg transition-all hover:scale-110"
                        >
                          <div className="text-gray-600 group-hover:text-green-600">
                            {getFileIcon(resource.extension)}
                          </div>
                          {/* Icona download piccola */}
                          <div className="absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1">
                            <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                            </svg>
                          </div>
                        </a>
                      );
                        })}
                      </div>
                    </div>
                  )}

                  {/* Azioni: Confronta + Aggiungi al carrello - flessibile */}
                  <div className="flex-1 w-full">
                    {/* Titolo invisibile per allineamento solo su desktop */}
                    <h4 className="hidden sm:block text-xs font-bold uppercase tracking-wider text-transparent mb-3 select-none">
                      &nbsp;
                    </h4>
                    <div className="flex gap-2 sm:gap-3">
                      {/* Pulsante Confronta */}
                      <button
                        onClick={handleCompareClick}
                        className={`flex-shrink-0 font-bold py-3 sm:py-4 px-3 sm:px-6 rounded-lg transition-all shadow-lg hover:shadow-xl flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base ${
                          inCompare
                            ? 'bg-blue-600 hover:bg-blue-700 text-white'
                            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                        }`}
                        title={inCompare ? getLabel('compare.remove', currentLang) : getLabel('compare.add', currentLang)}
                      >
                        <svg className="w-4 sm:w-5 h-4 sm:h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        <span className="hidden md:inline">
                          {inCompare ? 'Rimuovi' : 'Confronta'}
                        </span>
                      </button>

                      {/* Pulsante Aggiungi al carrello */}
                      <button
                        onClick={() => {
                          // TODO: Implementare logica carrello
                          console.log('Add to cart:', compareCode);
                        }}
                        className="flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-3 sm:py-4 px-3 sm:px-6 rounded-lg transition-all shadow-lg hover:shadow-xl flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base"
                      >
                        <svg
                          className="w-4 sm:w-5 h-4 sm:h-5 flex-shrink-0"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
                          />
                        </svg>
                        <span>{getLabel('product.add_to_cart', currentLang)}</span>
                      </button>
                    </div>
                  </div>
                </div>

                {/* Info prodotto statico (solo per prodotti senza varianti) */}
                {(!product.variants || product.variants.length === 0) && product.prezzo !== undefined && (
                  <div className="mt-3 sm:mt-4 p-3 sm:p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <div className="flex flex-col xs:flex-row justify-between items-start xs:items-center gap-3">
                      <div className="flex-1 min-w-0">
                        <p className="text-xs text-gray-500 font-mono">
                          {getLabel('product.code', currentLang)} {product.codice}
                        </p>
                        {product.attributi && Object.keys(product.attributi).length > 0 && (
                          <p className="text-xs sm:text-sm text-gray-700 mt-1 line-clamp-2">
                            {Object.entries(product.attributi)
                              .filter(([key]) => !['Scuri alla Veneta', 'Persiane a Muro', 'Persiane con Telaio'].includes(key))
                              .slice(0, 3)
                              .map(([key, value]) => {
                                let displayValue = '';
                                if (typeof value === 'object' && value !== null && 'value' in value) {
                                  const rawValue = value.value;
                                  if (typeof rawValue === 'object') {
                                    displayValue = getTranslatedValue(rawValue, currentLang);
                                  } else {
                                    displayValue = String(rawValue);
                                  }
                                } else {
                                  displayValue = String(value);
                                }
                                return `${key}: ${displayValue}`;
                              })
                              .join(' â€¢ ')}
                          </p>
                        )}
                      </div>
                      <div className="text-left xs:text-right flex-shrink-0">
                        <p className="text-xl sm:text-2xl font-bold text-green-600">
                          â‚¬{product.prezzo.toFixed(2).replace('.', ',')}
                        </p>
                        <p className="text-xs text-gray-500 mt-0.5">
                          {getLabel('product.price_suffix', currentLang)}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Sezione full-width: Descrizione AI */}
          <div className="border-t border-gray-200 px-3 sm:px-6 md:px-8 py-4 sm:py-8 bg-white">
            <AIDescription
              productCode={product.codice}
              productData={{
                nome: product.nome,
                descrizione: product.descrizione,
                immagine: product.immagine,
                attributi: selectedVariant?.attributi || product.attributi
              }}
            />
          </div>

          {/* Sezione full-width: Specifiche tecniche dinamiche dalla variante */}
          {(() => {
            // Usa gli attributi della variante selezionata, altrimenti quelli del prodotto master
            const attributiToShow = selectedVariant?.attributi || product.attributi;

            // Lista campi da escludere (categorie dal _meta)
            const categoryFields = new Set([
              'Scuri alla Veneta',
              'Persiane a Muro',
              'Persiane con Telaio'
            ]);

            // Filtra gli attributi per escludere le categorie
            const filteredAttributes = Object.entries(attributiToShow || {}).filter(
              ([key]) => !categoryFields.has(key)
            );

            if (filteredAttributes.length === 0) return null;

            return (
              <div className="border-t border-gray-200 px-3 sm:px-6 md:px-8 py-4 sm:py-8 bg-gradient-to-br from-gray-50 via-white to-gray-50">
                <div className="flex items-center gap-2 sm:gap-3 mb-4 sm:mb-6">
                  <div className="w-1 h-6 sm:h-8 bg-gradient-to-b from-green-500 to-green-600 rounded-full"></div>
                  <h3 className="text-xl sm:text-2xl font-bold text-gray-900">
                    {getLabel('product.specifications_title', currentLang)}
                  </h3>
                </div>
                <dl className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                  {filteredAttributes.map(([key, value]) => {
                    // Ottieni la label tradotta
                    let attributeLabel = key;
                    if (typeof value === 'object' && value !== null && 'label' in value) {
                      attributeLabel = getTranslatedValue(value.label, currentLang);
                    }

                    // Ottieni il valore formattato e determina se Ã¨ boolean
                    let displayValue = '';
                    let isBoolean = false;
                    let booleanValue = false;

                    if (typeof value === 'boolean') {
                      isBoolean = true;
                      booleanValue = value;
                      displayValue = value ? getLabel('common.yes', currentLang) : getLabel('common.no', currentLang);
                    } else if (typeof value === 'object' && value !== null && 'value' in value) {
                      const rawValue = value.value;
                      if (typeof rawValue === 'boolean') {
                        isBoolean = true;
                        booleanValue = rawValue;
                        displayValue = rawValue ? getLabel('common.yes', currentLang) : getLabel('common.no', currentLang);
                      } else if (typeof rawValue === 'object') {
                        displayValue = getTranslatedValue(rawValue, currentLang);
                      } else {
                        displayValue = String(rawValue);
                      }
                    } else {
                      displayValue = String(value);
                    }

                    return (
                      <div
                        key={key}
                        className="group relative bg-white border border-gray-200 rounded-xl p-3 sm:p-4 hover:shadow-lg hover:border-green-300 transition-all duration-300 hover:-translate-y-0.5"
                      >
                        <dt className="text-xs font-bold uppercase tracking-wider text-gray-500 mb-2">
                          {attributeLabel}
                        </dt>
                        <dd className="text-sm sm:text-base font-semibold">
                          {isBoolean ? (
                            <span className={`inline-flex items-center gap-1 sm:gap-1.5 px-2.5 sm:px-3 py-1 sm:py-1.5 rounded-md text-xs sm:text-sm font-bold shadow-sm ${
                              booleanValue
                                ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white'
                                : 'bg-gradient-to-r from-gray-300 to-gray-400 text-gray-700'
                            }`}>
                              {booleanValue ? 'âœ“' : 'âœ—'} {displayValue}
                            </span>
                          ) : (
                            <span className="text-gray-900 group-hover:text-green-600 transition-colors break-words">
                              {displayValue}
                            </span>
                          )}
                        </dd>
                        {/* Decorazione hover */}
                        <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-green-600 rounded-t-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      </div>
                    );
                  })}
                </dl>
              </div>
            );
          })()}

        </div>
      </main>
    </div>
  );
}
